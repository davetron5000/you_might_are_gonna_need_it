You might “Are Gonna Need It” - Avoiding the MonoRail
!TITLE
You might “Are Gonna Need It”
Avoiding the MonoRail
Dave Copeland / @davetron5000

!IMAGE
images/monorail.jpg

!BULLETS
Bad
* Slow to change
* Increased failures

!NORMAL
It <strong>will</strong> happen

!SECTION
What do I know?

!NORMAL
Lead Engineer @ Stitch Fix
We're avoiding a MonoRail

!IMAGE: background=fff
images/stitch_fix.png

!NORMAL
Former Engineer @ LivingSocial
We killed a MonoRail

!IMAGE: background=fff
images/living_social.png

!NORMAL
Basic Strategies

!NORMAL
Split existing application

!IMAGE: background=fff
images/split_application.png

!NORMAL
Create new application

!IMAGE: background=fff
images/new_application.png

!NORMAL
Extract services

!IMAGE: background=fff
images/service_extraction.png

!BULLETS
Consequences
* One database, many apps
* DB queries become HTTP calls
* Records lose “activeness”

!NORMAL
Can we prepare ourselves?

!QUOTE
<a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt">YAGNI</a>
<blockquote>Always implement things when you actually need them, never when you just foresee that you need them.</blockquote>

!NORMAL
YAGNI is about <em>features</em>
not <em>design decisions</em>

!NORMAL
What design decisions should we make?

!BULLETS
Design Decisions
* Make provisioning and deployment easy
* Use the database
* Better-factored code

!NUMSECTION
1
Make Provisioning & Deployment Easy

!BULLETS
Provisioning & Deployment
* Minimum Deployable Application
* Find a place to deploy
* Deploy in one step

!NORMAL
Minimum Deployable Application

!COMMANDLINE
> rails new your_app
# Generates a generic rails app

!COMMANDLINE
> rails new your_app --builder=http://dev.yourcompany.com/service_builder.txt
# Generates an app tailor-made for YOUR team

!NORMAL
Find a place to deploy

!BULLETS
Deploy in one step
* Capistrano
* git hooks
* script it yourself

!IMAGE
images/book.png

!BULLETS
Once deployed
* Verify configuration
* Re-deploy if needed
* <strong>Then</strong> add features

!IMPORTANT
Enables <strong>everything</strong> you need to do to avoid or fix a MonoRail

!NORMAL
If all else fails…
…use Rails engines to keep yourself honest

!NUMSECTION
2
Use Your Database

!IMAGE
images/god_emperor.jpg

!BULLETS
The Golden Path
* No other apps touch the database
* Validations ensure data integrity

!CODE: language=ruby
def up
  create_table :orders do |t|
    t.belongs_to :customer
    t.string     :name
    t.integer    :order_type
    t.date       :shipped_on
    t.timestamps
  end
end

!CODE: language=ruby
create_table :orders do |t|
  t.belongs_to :customer,   null: false
  t.string     :name,       null: true
  t.integer    :order_type, null: false
  t.date       :shipped_on, null: true
  t.timestamps
end
execute "ALTER table things 
         ADD FOREIGN KEY 
         (customer_id) REFERENCES customer(id);"

!CODE: language=ruby callout=2,3,4,5
create_table :orders do |t|
  t.belongs_to :customer,   null: false
  t.string     :name,       null: true
  t.integer    :order_type, null: false
  t.date       :shipped_on, null: true
  t.timestamps
end
execute "ALTER table things 
         ADD FOREIGN KEY 
         (customer_id) REFERENCES customer(id);"

!CODE: language=ruby callout=8,9,10
create_table :orders do |t|
  t.belongs_to :customer,   null: false
  t.string     :name,       null: true
  t.integer    :order_type, null: false
  t.date       :shipped_on, null: true
  t.timestamps
end
execute "ALTER table things 
         ADD FOREIGN KEY 
         (customer_id) REFERENCES customer(id);"

!BULLETS
Use the Database
* Explicit nullability
* Foreign keys
* Check constraints (if DB supports)

!NUMSECTION
3
Better-Factored Code

!NORMAL
Not demonstrating Rails' features

!NORMAL
Deliver value…
…through software…
…using Rails

!BULLETS
Two steps to better-factored code
* Not everything is an ActiveRecord object
* Not all code belongs on a model

!NUMSECTION
3.1
Not everything is an ActiveRecord object

!CODE: language=erb
&lt;h1&gt;Purchase &lt;%= @purchase.id %&gt;&lt;/h1&gt;
&lt;h2&gt;for &lt;%= @purchase.customer.name %&gt;&lt;/h2&gt;
&lt;dl&gt;
  &lt;dt&gt;Item&lt;/dt&gt;
  &lt;dd&gt;&lt;%= @purchase.item.description %&gt;&lt;/dd&gt;
  &lt;dt&gt;Price&lt;/dt&gt;
  &lt;dd&gt;&lt;%= @purchase.price %&gt;&lt;/dd&gt;
&lt;/dl&gt;

!BULLETS
Bad
* Changes to purchase, customer, and item all cause this to change
* If data comes from API call, this gets messy

!CODE: language=ruby
class PurchasePresenter
  def initialize(purchase)
    @purchase = purchase
    @customer = purchase.customer
    @item     = purchase.item
  end

  def customer_name;    @customer.name;    end
  def purchase_price;   @purchase.price;   end
  def purchase_id;      @purchase.id;      end
  def item_description; @item.description; end
end

!NORMAL
Just kicking the can down the road

!NORMAL
Decorators, Delgators, Exhibits?

!NORMAL
STILL just kicking the can…
…but hampering readability

!CODE: language=ruby
class PurchaseRecord
  extend  ActiveModel::Naming
  include ActiveModel::Conversion

  def persisted?; true; end

  attr_reader :customer_name,
              :purchase_price,
              :purchase_id,
              :item_description

  def initialize(attribtues={})
    @customer_name    = attributes[:customer_name]
    @purchase_price   = attributes[:purchase_price]
    @purchase_id      = attributes[:purchase_id]
    @item_description = attributes[:item_description]
  end
end

!CODE: language=ruby callout=2,3,5
class PurchaseRecord
  extend  ActiveModel::Naming
  include ActiveModel::Conversion

  def persisted?; true; end

  attr_reader :customer_name,
              :purchase_price,
              :purchase_id,
              :item_description

  def initialize(attribtues={})
    @customer_name    = attributes[:customer_name]
    @purchase_price   = attributes[:purchase_price]
    @purchase_id      = attributes[:purchase_id]
    @item_description = attributes[:item_description]
  end
end

!CODE: language=ruby callout=7,8,9,10
class PurchaseRecord
  extend  ActiveModel::Naming
  include ActiveModel::Conversion

  def persisted?; true; end

  attr_reader :customer_name,
              :purchase_price,
              :purchase_id,
              :item_description

  def initialize(attribtues={})
    @customer_name    = attributes[:customer_name]
    @purchase_price   = attributes[:purchase_price]
    @purchase_id      = attributes[:purchase_id]
    @item_description = attributes[:item_description]
  end
end

!CODE: language=ruby callout=12,13,14,15,16,17
class PurchaseRecord
  extend  ActiveModel::Naming
  include ActiveModel::Conversion

  def persisted?; true; end

  attr_reader :customer_name,
              :purchase_price,
              :purchase_id,
              :item_description

  def initialize(attribtues={})
    @customer_name    = attributes[:customer_name]
    @purchase_price   = attributes[:purchase_price]
    @purchase_id      = attributes[:purchase_id]
    @item_description = attributes[:item_description]
  end
end

!CODE: language=ruby
class PurchaseRecord
  def self.from_purchase(purchase)
    self.new(customer_name: purchase.customer.name,
            purchase_price: purchase.price,
               purchase_id: purchase.id,
          item_description: purchase.item.description)
  end
end

!BULLETS
Better
* View has fewer reasons to change
* Our <em>data structure</em> has fewer reasons to change
* Reasons to change localized to factory method
* Can be replaced by <code>OpenStruct</code>

!NUMSECTION
3.2
Not All Code Belongs to a Model

!BULLETS
How Stitch Fix processes returns
* Shipment is marked as received
* Check if user has paid for kept items
* Check if unpaid items were returned
* Record status of each item - sold, recieved, damanged
* Charge customer if they haven't paid
* Email customer service any outliers

!BULLETS
What model does this go with?
* <code>Return</code>? Why would it know about charging customers?
* <code>Shipment</code>? Why would it know emailing customer service?
* <code>Customer</code>? Why would it know about item statusses?
* A series of observers, hooks, callbacks and delegators?

!NORMAL
KISS

!NORMAL
Keep It Simple
(Stupid)

!NORMAL
Consider Service Objects

!CODE: language=ruby
class ReturnProcessor
  def self.process!(the_return,logged_in_user)
    # All that crazy logic
  end
end

!BULLETS
Better
* Logic around business process is in one place
* Tests to assert things are working are in one place
* Can be extracted with few code changes

!BULLETS
Advantages
* ActiveRecord objects change infrequently and be shared or copied
* Service Objects can be shared in gems
* Extracting REST-like services is straightforward

!NORMAL
This isn't YAGNI,
it's a design decision.

!NORMAL
Remember, you aren't demonstrating features of Rails (or Ruby)

!SECTION
To Review

!NORMAL
Make setting up a new app dead simple

!NORMAL
Use your database to enforce data integrity

!NORMAL
Use non-active Records and Service Objects to organize your codebase

!SECTION
The End
@davetron5000
http://www.naildrivin5.com
